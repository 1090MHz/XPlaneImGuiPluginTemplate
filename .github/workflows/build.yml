name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            arch: win_x64
          - os: ubuntu-latest
            arch: lin_x64
          - os: macos-latest
            arch: mac_x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Docker Compose (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install docker-compose
        docker compose --version

    - name: Setup dependencies with Docker (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $env:EXPORT_BASE_DIR="../third_party"
        docker compose -f ./PreflightCheckLibs/docker-compose.yml up
      working-directory: ${{ github.workspace }}
      continue-on-error: true

    - name: Setup dependencies with Docker (Linux)
      if: runner.os == 'Linux'
      run: |
        EXPORT_BASE_DIR="../third_party" docker compose -f ./PreflightCheckLibs/docker-compose.yml up || EXPORT_BASE_DIR="../third_party" docker-compose -f ./PreflightCheckLibs/docker-compose.yml up
      working-directory: ${{ github.workspace }}
      continue-on-error: true

    - name: Install OpenGL dev libraries (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.15'

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cd build
        cmake --build . --config Release

    - name: Test install (create staging directory)
      run: |
        cd build
        cmake --install . --prefix "./staging"

    - name: Verify build artifacts
      shell: bash
      run: |
        cd build/staging
        if [ "${{ runner.os }}" = "Windows" ]; then
          ls -la win_x64/
          test -f "win_x64/XPlaneImGuiPlugin.xpl"
        elif [ "${{ runner.os }}" = "Linux" ]; then
          ls -la lin_x64/
          test -f "lin_x64/XPlaneImGuiPlugin.xpl"
        elif [ "${{ runner.os }}" = "macOS" ]; then
          ls -la mac_x64/
          test -f "mac_x64/XPlaneImGuiPlugin.xpl"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: plugin-${{ matrix.arch }}
        path: build/staging/
        retention-days: 7
